# -*- mode: org; mode: flyspell; ispell-local-dictionary: "hu" -*-

#+STARTUP: beamer
#+INCLUDE: "../beamer-common.org"
#+DATE: 2014-2015
#+TITLE: Többdimenziós tömbök

* Többdimenziós tömbök 
** Deklaráció
*** Szintaxis
**** Egydimenziós tömbök
#+BEGIN_SRC pascal
  var 
    A : array [1..10] of integer;
    B : array [1..20] of real;
#+END_SRC
**** Általános definíció
#+BEGIN_SRC pascal
  var 
    TÖMBNÉV : array [1..10] of TÍPUS;
#+END_SRC
**** Többdimenziós tömb
     - "tömbök tömbje" vagy két index tartomány  
     - például =array[1..5] of array [1..6] of integer;=
     - vagy =array [1..5,1..6] of integer=
*** Tagok elérése
**** Több indexű tömb
     - =A[i,j]= vagy
**** Tömbök tömbje
     - =A[i]= egy résztömb (j. oszlopa), =A[i][j]= az elem (i. sor j. oszlop)
**** Több dimenziós tömböknél hasonlóan
     - =S : array[1..10] of array[1.20] of array[1.30] of real;=
     - ~S[1,2,3]=S[1][2][3]~
* Konstansok és típusok
** Deklaráció
** Szintaxis
**** Konstans deklarációk
    - Általában a =var= előtt (a =program= után)
    - =const KONSTANSNÉV = ÉRTÉK=
**** Típus deklarációk
    - Általában a =const= és a =var= között
    - =type TÍPUSNÉV = TÍPUS=
**** Példa
#+BEGIN_SRC pascal :tangle pascal/2m-1-const-type.pas
  { -*- mode: pascal; compile-command: "fpc 2m-1-const-type.pas && ./2m-1-const-type.pas" -*- }
  program typedemo;
  const
     MAXDIM = 1000;
  type
     Matrix = array[1..MAXDIM] of array[1..MAXDIM] of integer;
  begin {...} end.
#+END_SRC
*** Konstansok és típus nevek
**** Konstansok
     - A programban többször használt konstansok elnevezése
     - Előfordulhat, hogy nem lehet változót használni.
       - Például a tömb méretei
     - Ha többször használjuk egy programban, és javítani kell, 
       akkor előfordulhat, hogy hibázunk, rosszul javítjuk
     - Ha konstansnak deklaráljuk, akkor csak a definíciónál kell 
       módosítani
**** Összetett típusok elnevezése
     - A konstansokkal értékeket lehet elnevezni, típusokat nem
     - A típusokat is többször használhatjuk és az iméntiek
       itt is érvényesek
     - Ezen felül, egy összetett típust hosszú legépelni
* Gyakorlás
** Feladatok
*** Declmat
    - Töltsünk fel egy $4\times 4$ mátrixot
    - Egész számokkal 0-tól 9-ig
    - Írjuk ki a mátrixot
*** Megoldás (declmat)
#+BEGIN_SRC pascal :tangle pascal/2m-1-declmat.pas :noweb no-export
  program declmat;
  var 
     M   : array[1..4,1..4] of integer;
     i,j : integer;
  begin
     randomize; 
     for i:=1 to 4 do       {-----Feltöltés}
        for j:=1 to 4 do
           M[i,j] := random(10);
     for i:=1 to 4 do begin {-----Kiírás}
        for j:=1 to 4 do 
           write(M[i,j]:3);
        writeln; 
     end;
  end.
#+END_SRC
*** Randmat
**** Írjunk ki egy véletlen egészekkel feltöltött mátrixot
     - Külön eljárással töltsük fel a mátrixot: =RandMat()=
     - Külön eljárással írjuk ki: =WriteMat()=
     - A mátrix legyen $\mathbb{Z}^{n\times n}$ és $n$ legyen konstans
     - Használjunk =type= elnevezést a mátrixra
     - A mátrix elemeire teljesüljön az hogy $1\le$ és $\le100$
*** Megoldás (randmat-decl)
#+NAME: randmat-decl 
#+BEGIN_SRC pascal
  program randmat;
  const
     N = 5;
  type
     matrix = array[1..N,1..N] of integer;
#+END_SRC
*** Megoldás (randmat-randmat)
#+NAME: randmat-randmat 
#+BEGIN_SRC pascal
  function randmat : matrix;
  var 
     i,j : integer;
  begin
     for i := 1 to N do
        for j := 1 to N do
           randmat[i,j] := random(100)+1;
  end;
#+END_SRC
*** Megoldás (randmat-writemat)
#+NAME: randmat-writemat
#+BEGIN_SRC pascal
  procedure writemat(M : matrix);
  var i,j : integer;
  begin
     for i := 1 to N do begin
        for j := 1 to N do begin
           write(M[i,j]:4);
        end;
        writeln;
     end;
  end;
#+END_SRC
*** Megoldás (randmat)
#+BEGIN_SRC pascal :tangle pascal/2m-1-randmat.pas :noweb no-export
  <<randmat-decl>>
  <<randmat-randmat>>
  <<randmat-writemat>>
  var A : matrix;
  begin
     randomize;
     A := randmat;
     writemat(A);
  end.
#+END_SRC
*** Feladat
**** Mátrix szorzás
     - Töltsünk fel két ($n\times n$) mátrixot véletlen egészekkel
       - A =type= és =const= használata a jövőben nem lesz 
         kihangsúlyozva
     - Számoljuk ki a mátrix szorzatát
       - Szintén nem lesz kihangsúlyozva, hogy ezt egy 
         függvénnyel kell megvalósítani
       - A mátrix szorzás eredménye 
         $c_{i,j}=\sum_k a_{i,k}b_{k,j}$ 

*** Megoldás (mulmat-decl)
#+NAME: mulmat-decl
#+BEGIN_SRC pascal :noweb no-export
program mulmat;
const
   N = 4;
type
   matrix = array[1..N,1..N] of integer;
#+END_SRC
*** Megoldás (mulmat-randmat)
#+NAME: mulmat-randmat
#+BEGIN_SRC pascal
  function randmat : matrix;
  var 
     i,j : integer;
  begin
     for i := 1 to N do
        for j := 1 to N do
           randmat[i,j] := random(10)-5;
  end;
  
#+END_SRC
*** Megoldás (mulmat-mulmat)
#+NAME: mulmat-mulmat
#+BEGIN_SRC pascal
  function mulmat(a,b : matrix):matrix;
  var 
     i,j,t : integer;
  begin
     for i := 1 to N do
        for j := 1 to N do
           mulmat[i,j]:=0;
     for i := 1 to N do
        for j := 1 to N do
           for t := 1 to N do
              mulmat[i,j]:=mulmat[i,j] + a[i,t]*b[t,j]
  end;  
#+END_SRC
*** Megoldás (mulmat)
#+BEGIN_SRC pascal :tangle pascal/2m-1-mulmat.pas :noweb no-export
<<mulmat-decl>>
<<randmat-writemat>> { Újrahasznosítás!!! }
<<mulmat-randmat>>   { Majdnem újrahasznosítás }
<<mulmat-mulmat>>
var
   a,b,c : matrix;
begin
   randomize;
   a:=randmat;     writemat(a); writeln;
   b:=randmat;     writemat(b); writeln;
   c:=mulmat(a,b); writemat(c); writeln;
end.

#+END_SRC
*** Feladat
**** Tetszőleges méretű mátrix szorzás
     - Valósítsuk meg a *mátrix szorzást*, 
     - *tetszőleges* $n\times n$ méretű mátrixokra, ahol 
     - az $n$ értékét a felhasználó *olvassa be*.
     - (A többi feltétel hasonló mint az előző feladatnál).
*** Megoldás (matnmul-decl)
#+NAME: matnmul-decl
#+BEGIN_SRC pascal :noweb no-export
program matnmul;
const
   MaxSize = 1000;
type
   matrix = array[1..MaxSize,1..MaxSize] of integer;
#+END_SRC
*** Megoldás (matnmul-writemat)
#+NAME: matnmul-writemat
#+BEGIN_SRC pascal
  procedure writemat(n:integer; M : matrix);
  var i,j : integer;
  begin
     for i := 1 to n do begin
        for j := 1 to n do begin
           write(M[i,j]:4);
        end;
        writeln;
     end;
  end;
#+END_SRC
*** Megoldás (matnmul-randmat)
#+NAME: matnmul-randmat
#+BEGIN_SRC pascal
  function randmat(n:integer) : matrix;
  var 
     i,j : integer;
  begin
     for i := 1 to n do
        for j := 1 to n do
           randmat[i,j] := random(10)-5;
  end;
  
#+END_SRC
*** Megoldás (matnmul-mulmat)
#+NAME: matnmul-mulmat
#+BEGIN_SRC pascal
  function mulmat(n:integer; a,b : matrix):matrix;
  var 
     i,j,t : integer;
  begin
     for i := 1 to n do
        for j := 1 to n do
           mulmat[i,j]:=0;
     for i := 1 to N do
        for j := 1 to n do
           for t := 1 to n do
              mulmat[i,j]:=mulmat[i,j] + a[i,t]*b[t,j]
  end;  
#+END_SRC
*** Megoldás (matnmul)
#+BEGIN_SRC pascal :tangle pascal/2m-1-matnmul.pas :noweb no-export
<<matnmul-decl>>
<<matnmul-writemat>> 
<<matnmul-randmat>>
<<matnmul-mulmat>>
var
   a,b,c : matrix;
   n : integer;
begin
   randomize;
   // n:=4; 
   readln(n);
   a:=randmat(n);  writemat(n,a);  writeln;
   b:=randmat(n);  writemat(n,b);  writeln;
   c:=mulmat(n,a,b); writemat(n,c); writeln;
end.

#+END_SRC
