# -*- mode: org; mode: flyspell; ispell-local-dictionary: "hu" -*-

#+STARTUP: beamer
#+INCLUDE: "../beamer-common.org"
#+DATE: 2014-2015
#+TITLE: String

* Rekord típus
** Deklaráció
*** Deklaráció (records-decl)
#+NAME: records-decl
#+BEGIN_SRC pascal
  program records;
  type 
     status_t = (single, inarelationship, itscomplicated);
     person_t = record
       name       : string;
       birth_year : integer;
       status     : status_t;
     end;
#+END_SRC
**** Rekordok deklarációja
     A *rekord* egy összetett típus, amely több, tetszőleges típusú
     változókból áll.  Ezeket a változóknak, *tagoknak* vagy
     tagváltozóknak hívják.
** Tagok elérése
*** ~print_person()~ (records-write)
#+NAME: records-write
#+BEGIN_SRC pascal
procedure write_person(person : person_t);
begin
   // HF: átírni with paranccsal!
   writeln('Name: ', person.name);
   writeln('Birth year: ', person.birth_year);
   writeln('Relationship status: ', person.status);
end;
#+END_SRC
**** Tagok elérése
     Egy rekord típusú változó tagját, úgy tudjuk elérni hogy a
     változó után egy pontot majd a tag változó nevét írjuk.  Így a
     tagokat ki is tudjuk olvasni és értékeket is tudunk neki adni.
** =with= parancs
*** =init_persion()= (records-init)
#+NAME: records-init
#+BEGIN_SRC pascal
procedure init_person(var person : person_t; n : string; by : integer; s : status_t);
begin
   with person do begin
      name := n;
      birth_year := by;
      status := s;
   end;
end;
#+END_SRC
**** A =with= parancs
** Értékadás
*** A fő program (records)
    #+BEGIN_SRC pascal :tangle pascal/records.pas :noweb no-export
      <<records-decl>>
      <<records-init>>
      <<records-write>>
      var
      mrx,mrsy : person_t;
      begin
         init_person(mrx,'Mr X.', 1996, single);
         mrsy := mrx;
         mrsy.name := 'Mrs. Y';
         write_person(mrx);
         write_person(mrsy);
      end.
    #+END_SRC
**** Értékadás
     Két azonos rekord típusú változót értékül adhatunk egymásnak,
     és ilyenkor az egyes tagok értékül adódnak.
