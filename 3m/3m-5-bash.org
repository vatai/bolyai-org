# -*- mode: org; mode: flyspell; ispell-local-dictionary: "hu" -*-

#+STARTUP: beamer
#+INCLUDE: "../beamer-common.org"
#+DATE: 2014-2015
#+TITLE: Operációs rendszerek

* Programok a parancssorban
** Csatlakozási pontok
*** stdin, stdout és stderr
**** Standard bemenet, kimenet és hiba csatornák
    - Minden programnak három (szöveges) csatlakozási pontja van: A
      standard bemenet (stdin), a standard kimenet (stdout) és a
      standard hiba kimenet (stderr). A stdout értéke 1, a stderr
      értéke 2.

    - A két kimenet azért van hogy meg tudjuk különböztetni a
      felhasználható (várt) kimenetet, a hiba üzenetektől. Alapvetően
      a stdout és a stderr külön van kezelve.

    - Alapvetően egy program a stdin-t a billentyűzetről várja, míg a
      stdout és a stderr a képernyőre íródik ki (a parancssorban).
*** Átirányítás
    Az átirányítás a =>= és =>>= jelekkel történik.
**** Felülírás és Hozzáírás
     - A =cmd > file.txt= a =cmd= parancs stdout-ját írja bele a
       =file.txt= fájlba (felülírva azt). Ez egyenértékű a =cmd 1>
       file.txt= paranccsal.
     - A =cmd >> file.txt= a =cmd= parancs stdout-ját írja hozzá a
       =file.txt= fájl végéhez. Ez egyenértékű a =cmd 1>> file.txt=
       paranccsal.
**** StdErr kezelése
     - A =cmd 2 > errorfile.txt= a =cmd= parancs stderr-ját írja ki az
       =errorfile.txt= fájlba. Hasonlóan a =cmd 2 >> errorfile.txt= a
       =cmd= parancs stderr-ját írja hozzá =errorfile.txt= végéhez.
     - A stderr átirányítható a stdout-ra is, =&= segítségével vagy
       fordítva. Például a =cmd 2>&1= a stderr-t irányítja át a
       stdout-ra.
*** Példák
#+BEGIN_SRC sh
  vatai@thundr:~$ ls ilyenfilenincs > ures.txt
  ls: cannot access ilyenfilenincs: No such file or directory
  vatai@thundr:~$ cat ures.txt 
  vatai@thundr:~$ ls ilyenfilenincs > ures.txt 2>&1
  vatai@thundr:~$ cat ures.txt 
  ls: cannot access ilyenfilenincs: No such file or directory
  vatai@thundr:~$ 
#+END_SRC
*** Pipe
**** Szintaxis
     ~cmd1 | cmd2~
**** Szemantika
     Pipe vagy csővezetéknek nevezzük azt a konstrukciót, amikor az
     egyik parancs kimenetét (stdout) átirányítjuk a másik parancs
     bemenetére. Azaz a ~cmd1 | cmd2~ parancs nagyjából annak felel
     meg hogy átirányítjuk a ~cmd1~ egy fájlba (például ~cmd1 > tmp~),
     majd ezt a fájlt adjuk meg a ~cmd2~ parancs paramétereként (azaz
     ~cmd2 tmp~).

     A pipe a hatékonyabb a fenti átirányításos módszernél:
     - nem kell létrehozni az ideiglenes fájlt
     - a két program párhuzamosan fut, és soronként dolgozza fel a
       második parancs az első parancs kimeneteit.
*** Kiértékelés
**** Szintaxis 
     ~`cmd`~ vagy ~$(cmd)~
     - A második javasolt, mert az beágyazható.
**** Szemantika
     A ~$(cmd)~ (vagy ~`cmd`~) utasítás végrehajtja a ~cmd~ parancsot
     és kiértékeli a kimenetet, azaz olyan mintha a ~cmd~ parancs
     kimenetét begépelnénk a ~$(cmd)~ helyére és egy entert nyomnánk.

     Megjegyzés: a kiértékelés kombinálható más parancsokkal is.
**** Példa
     - Az ~echo ls~ kimenete az, hogy ~ls~ ezért az ~$(echo ls)~ az ~ls~
       parancsot hajtja végre.
     - A ~$(cat cmd.txt)~ a ~cmd.txt~-ben található parancsot fogja
       végrehajtani.
     - Az ~ls $(cat param.txt)~ az ~ls~ parancsot hívja meg a
       ~param.txt~ fájlban szereplő paraméterekkel

** BASH programozás
*** Változók
**** Szintaxis
     - Értékadás: ~VAR=value~
     - Hivatkozás: ~$VAR~
**** Szemantika
     A változónak tetszőleges string értéket tudunk adni. (Oda kell
     figyelni, hogy az ~=~ előtt és után ne legyen szünet.)
     
     Amikor használni akarjuk a változó értékét, akkor egy ~$~ jelet
     kell elé tenni.
**** Példa
     - ~X=gabba~
     - ~Y=hey~
     - Így az ~echo $X$X$Y~ azt írja ki hogy ~gabbagabbahey~
*** Idézőjelek
**** Speciális karakterek
    - Speciális karakterek (pl üres hely) is értékül adható, de akkor
      ~\~ (backslash) escape karaktert kell elé írni
    - A dupla idézőjelek a speciális karaktereket is átadja (pl üres
      hely) (azaz mindent escape-elnek) de a változókat
      behelyettesíti.
    - A szimpla idézőjelek meggátolja a változók behelyettesítését és
      mindent úgy ad át ahogy be van írva.
*** Példa
    #+BEGIN_SRC sh
      vatai@thundr:~$ ketszo=egyszo\ ketszo
      vatai@thundr:~$ echo $ketszo
      egyszo ketszo

      vatai@thundr:~$ haromszo="egy ket ha"
      vatai@thundr:~$ echo $haromszo
      egy ket ha

      vatai@thundr:~$ negyszo="$ketszo $ketszo"
      vatai@thundr:~$ echo $negyszo
      egyszo ketszo egyszo ketszo
    #+END_SRC
*** Példa (folyt)
    #+BEGIN_SRC sh
      vatai@thundr:~$ fura='$ketszo $ketszo'
      vatai@thundr:~$ echo $fura
      $ketszo $ketszo

      vatai@thundr:~$ szunetes="   <-üres helyek"
      vatai@thundr:~$ echo $szunetes
      <-üres helyek
      vatai@thundr:~$ echo "$szunetes"
         <-üres helyek
      vatai@thundr:~$ echo '$szunetes'
      $szunetes
    #+END_SRC
*** Rendszer változók
**** ~$HOME~ változó
     - A ~$HOME~ változóban tárolja a rendszer hogy melyik a "home"
       derektóriumunk. 
     - Például: ~echo $HOME~ olyasmit ír ki hogy ~/home/vatai~
     - vagy ~ls $HOME/assembly/~
**** ~$PATH~ változó
    - A $PATH változóban van azoknak a direktóriumok listája melyben
      található programok bárhonnan elérhetőek (kettőspontokkal
      elválasztva).
    - A =which= paranccsal lehet megnézni pontosan melyik parancsról
      van szó.
    - Új direktórium adható a ~$PATH~ változóhoz, a következő módon:
      =PATH=$HOME/bin:$PATH=
*** Program struktúrák
**** Szekvencia
     - 
* GNU Parancsok
*** pwd
    Ki írja az aktuális direktóriumot.
*** =mkdir= és =rmdir=
    =mkdir dirnev= létrehozza a =dirnev= nevű direktóriumot.
    
    A =-p= paraméterrel több mélységbe tudunk direktóriumokat
    létrehozni, pl =mkdir dir1/dir2/dir3= hiba üzenetet add ha nem
    létezik =dir1/dir2=, de =mkdir -p dir1/dir2/dir3= már jól
    működik.

    =rmdir= paranccsal tudunk üres direktóriumokat törölni.
*** =rm=
    Az =rm= (azaz remove rövidítése) paranccsal tudunk törölni. Pl
    =rm file.txt= törli a =file.txt= fájlt.

    A =-r= paraméterrel tudunk, rekurzívan (nem üres direktóriumokat)
    /mindent/ törölni.
*** cd
    Módosítja az aktuális direktóriumot, pl. =cd path/to/dir= a
    =path/to/dir= direktóriumba.     
*** ls
    Az =ls= parancs kilistázza az aktuális direktórium tartalmát.

    A =-l= (long) paraméter részletes listát készít.
    
    A =-a= (all) paraméterrel a rejtet fájlokat is kilistázzuk.

    A =-t= (time) paraméter a módosítási idő szerint rendezi a listát.

    A =-r= (reverse) fordított sorrendben írja ki a listát.
*** man
    - =man parancs= utasítással tudunk segítséget kérni a
      =parancs=-ról.
    - =/= jellel tudunk keresni, és =n=-nel tudjuk megismételni a
      keresést.
    - =q=-val tudunk kilépni.
*** gcc és g++
*** touch
    ~touch xyz~ Létrehozza az ~xyz~ nevű fájlt vagy módosítja a
    "módosítási dátumukat"
*** echo
    ~echo hello~ kiírja azt hogy ~hello~

    ~-n~ nem tesz új sort a szöveg után
    
    ~-e~ bekapcsolja a ~\~ escape karaktert: például ~\n~ új sor, ~\t~
    tabulátor stb. (ld ~man echo~)
*** cat
    A ~cat vmi.txt~ kiírja a ~vmi.txt~ tartalmát a ~stdout~-ra. 
    Az alapértelmezett input az ~stdin~.
*** cut
    A =cut OPT file.txt= parancs soronként feldolgozza a =file.txt=
    fájlt. Az alapértelmezett input az ~stdin~.
**** Kapcsolók    
    Az =OPT= a következő lehet:
    - karakterek kivágása: =-cN-M= kivágja minden sor =N=-ik
      karakterétől az =M=-ik karakteréig található részeket. (=N=
      vagy =M= elhagyható).
    - mezők kivágása: =-fN-M= kivágja minden sor =N=-ik mezőjétől az
      =M=-ik mezejéig található részeket. (=N= vagy =M= elhagyható).
      A mezőt =-d= (delimiter) lehet megadni.
*** head és tail
    ~head -n3 vmi.txt~ illetve a ~tail -n2 vmi.txt~ kiírja a ~vmi.txt~ fájl első három
    illetve utolsó 2 sorát. Az alapértelmezett input az ~stdin~.
*** wc
    A ~wc vmi.txt~ kiírja a ~vmi.txt~ fájlban található karakterek,
    szavak és sorok számát.  Az alapértelmezett input az ~stdin~.
**** Kapcsolók
     ~-l~, ~-w~ és ~-c~ kapcsolókkal csak a sorok, szavak illetve
     karakterek számát írja ki.
*** Reguláris kifejezések (regexp)
    A regex (vagy regexp) egy minta leíró nyelv, azaz mintákat leíró
    szabályok:
    - ~.~ :: tetszőleges karakter
    - ~\^~ :: a sor eleje
    - ~\$~ :: a sor vége
    - ~[..]~ :: karakterek csoportja, azaz a zárójelekben szereplő
                betűk közül akármelyik (pl [abc] a vagy b vagy c, de
                lehet intervallumokat is használni, [0-9] tetszőleges
                számjegy).  A szögletes zárójelek között a ~^~
                negációt jelent, azaz akármi csak az nem!
    - ~?~ :: 0 vagy 1-szer a megelőző karakter
    - ~*~ :: 0 vagy többször a megelőző karakter
    - ~+~ :: 1 vagy többször a megelőző karakter
*** grep
*** sed
*** tar
*** apt-get
